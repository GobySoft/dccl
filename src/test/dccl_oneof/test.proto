// Copyright 2019-2022:
//   GobySoft, LLC (2013-)
//   Community contributors (see AUTHORS file)
// File authors:
//   Toby Schneider <toby@gobysoft.org>
//   Davide Fenucci <davfen@noc.ac.uk>
//
//
// This file is part of the Dynamic Compact Control Language Library
// ("DCCL").
//
// DCCL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 2.1 of the License, or
// (at your option) any later version.
//
// DCCL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with DCCL.  If not, see <http://www.gnu.org/licenses/>.
@PROTOBUF_SYNTAX_VERSION@

import "dccl/option_extensions.proto";

package dccl.test;

message EmbeddedMsg1
{
    optional double val = 1 [
        (dccl.field).min = 0,
        (dccl.field).max = 126,
        (dccl.field).precision = 3
    ];
    oneof nested_oneof
    {
        int32 int32_nested_oneof = 116
            [(dccl.field).min = 0, (dccl.field).max = 31];
        double double_nested_oneof = 117
            [(dccl.field).min = -1, (dccl.field).max = 126];
    }
}

message TestMsg
{
    option (dccl.msg).id = 2;
    option (dccl.msg).max_bytes = 32;
    option (dccl.msg).codec_version = 4;

    oneof test_oneof1
    {
        double double_oneof1 = 118 [
            (dccl.field).min = -100,
            (dccl.field).max = 126,
            (dccl.field).precision = 2
        ];

        EmbeddedMsg1 msg_oneof1 = 119;
        double non_default_double = 122
            [(dccl.field).codec = "dccl.native_protobuf"];
    }

    oneof test_oneof2
    {
        int32 int32_oneof2 = 120
            [(dccl.field).min = -20, (dccl.field).max = 3000];
        EmbeddedMsg1 msg_oneof2 = 121;
    }
}

message InvalidTestMsg
{
    option (dccl.msg).id = 3;
    option (dccl.msg).max_bytes = 32;
    option (dccl.msg).codec_version = 4;

    oneof test_oneof1
    {
        double double_oneof1 = 118 [
            (dccl.field).min = -100,
            (dccl.field).max = 126,
            (dccl.field).in_head = true,
            (dccl.field).precision = 2
        ];

        EmbeddedMsg1 msg_oneof1 = 119;
    }

    oneof test_oneof2
    {
        int32 int32_oneof2 = 120
            [(dccl.field).min = -20, (dccl.field).max = 3000];
        EmbeddedMsg1 msg_oneof2 = 121;
    }
}