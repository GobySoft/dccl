// Copyright 2010-2018:
//   GobySoft, LLC (2013-)
//   Massachusetts Institute of Technology (2007-2014)
//   Community contributors (see AUTHORS file)
// File authors:
//   Toby Schneider <toby@gobysoft.org>
//   Chris Murphy <cmurphy@aphysci.com>
//
//
// This file is part of the Dynamic Compact Control Language Library
// ("DCCL").
//
// DCCL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 2.1 of the License, or
// (at your option) any later version.
//
// DCCL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with DCCL.  If not, see <http://www.gnu.org/licenses/>.
@PROTOBUF_SYNTAX_VERSION@
import "dccl/option_extensions.proto";
package dccl.test;

// required fields will be filled in for you by ApplicationBase
// if you choose not to do so yourself
message Header
{
  //
  // time
  //

  // microseconds since Unix

  // second precision (default)
  required uint64 time = 10 [(dccl.field).codec="_time",
                             (dccl.field).in_head=true];

  optional int64 time_signed = 20 [(dccl.field).codec="_time",
                                   (dccl.field).in_head=true];
  optional double time_double = 21 [(dccl.field).codec="_time",
                                    (dccl.field).in_head=true];
  optional double pasttime_double = 22 [(dccl.field).codec="_time",
                                          (dccl.field).num_days=6,
                                          (dccl.field).in_head=true];  
  optional double futuretime_double = 23 [(dccl.field).codec="_time",
                                          (dccl.field).num_days=6,
                                          (dccl.field).in_head=true];  

  // microsecond precision
  optional int64 time_precision = 24 [(dccl.field).codec="_time",
                                      (dccl.field).in_head=true,
                                      (dccl.field).precision=-3];
  optional double time_double_precision = 25 [(dccl.field).codec="_time",
                                              (dccl.field).in_head=true,
                                              (dccl.field).precision=6];
  
  //
  // source
  //
  required int32 source_platform = 11 [(dccl.field).min = 0,
                                       (dccl.field).max = 31,
                                       (dccl.field).in_head=true];
  optional string source_app = 12 [(dccl.field).omit=true];
  
  //
  // destination
  //
  enum PublishDestination { PUBLISH_SELF = 1; PUBLISH_OTHER = 2; PUBLISH_ALL = 3; }
  optional PublishDestination dest_type = 13 [default = PUBLISH_SELF, (dccl.field).in_head=true];
  
  optional int32 dest_platform = 14 [(dccl.field).min = 0,
                                     (dccl.field).max = 31,
                                     (dccl.field).in_head=true]; // required if dest_type == other

}
