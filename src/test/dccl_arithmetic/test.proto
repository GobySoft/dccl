// Copyright 2012-2022:
//   GobySoft, LLC (2013-)
//   Massachusetts Institute of Technology (2007-2014)
//   Community contributors (see AUTHORS file)
// File authors:
//   Toby Schneider <toby@gobysoft.org>
//   Chris Murphy <cmurphy@aphysci.com>
//
//
// This file is part of the Dynamic Compact Control Language Library
// ("DCCL").
//
// DCCL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 2.1 of the License, or
// (at your option) any later version.
//
// DCCL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with DCCL.  If not, see <http://www.gnu.org/licenses/>.
syntax = "proto2";
import "dccl/option_extensions.proto";
import "dccl/arithmetic/protobuf/arithmetic_extensions.proto";
package dccl.test;


enum Enum1
{
  ENUM_A = 1;
  ENUM_B = 2;
  ENUM_C = 3;
}


enum Enum2
{
  ENUM2_A = 1;
  ENUM2_B = 2;
  ENUM2_C = 3;
  ENUM2_D = 4;
  ENUM2_E = 5;
}



message ArithmeticDoubleTestMsg
{
  option (dccl.msg).id = 1;
  option (dccl.msg).max_bytes = 512;
  option (dccl.msg).codec_version = 4;
    
  repeated double value = 101 [(dccl.field).codec = "_arithmetic",
                               (dccl.field).(arithmetic).model = "model",
                               (dccl.field).(arithmetic).debug_assert = true,
                               (dccl.field).max_repeat=4];
}
message ArithmeticEnumTestMsg
{
  option (dccl.msg).id = 2;
  option (dccl.msg).max_bytes = 512;
  option (dccl.msg).codec_version = 4;
  
  repeated Enum1 value = 114 [(dccl.field).codec = "_arithmetic",
                              (dccl.field).(arithmetic).model = "model",
                              (dccl.field).(arithmetic).debug_assert = true,
                              (dccl.field).max_repeat=4];
  
}

message ArithmeticSingleEnumTestMsg
{
  option (dccl.msg).id = 3;
  option (dccl.msg).max_bytes = 512;
  option (dccl.msg).codec_version = 4;
  
  required Enum1 value = 114 [(dccl.field).codec = "_arithmetic",
                              (dccl.field).(arithmetic).model = "model",
                              (dccl.field).(arithmetic).debug_assert = true];
  
}

message ArithmeticEnum2TestMsg
{
  option (dccl.msg).id = 4;
  option (dccl.msg).max_bytes = 512;
  option (dccl.msg).codec_version = 4;
  
  repeated Enum2 value = 114 [(dccl.field).codec = "_arithmetic",
                              (dccl.field).(arithmetic).model = "model",
                              (dccl.field).(arithmetic).debug_assert = true,
                              (dccl.field).max_repeat=8];
  
}

message ArithmeticDouble2TestMsg
{
  option (dccl.msg).id = 5;
  option (dccl.msg).max_bytes = 10000;
  option (dccl.msg).codec_version = 4;
  
  repeated int32 value = 101 [(dccl.field).codec = "_arithmetic",
                              (dccl.field).(arithmetic).model = "model",
                              (dccl.field).(arithmetic).debug_assert = true,
                              (dccl.field).max_repeat=100];
}


message ArithmeticDouble3TestMsg
{
  option (dccl.msg).id = 6;
  option (dccl.msg).max_bytes = 10000;
  option (dccl.msg).codec_version = 4;
  
  repeated int32 value = 101 [(dccl.field).codec = "_arithmetic",
                              (dccl.field).(arithmetic).model = "model",
                              (dccl.field).max_repeat=4,
                              (dccl.field).(arithmetic).debug_assert = true];
}


  // repeated float float_arithmetic_repeat = 102 [(dccl.field).(arithmetic).model = "float_model",
  //                                              (dccl.field).max_repeat=4];

  // repeated int32 int32_arithmetic_repeat = 103 [(dccl.field).(arithmetic).model = "int_model",
  //                                              (dccl.field).max_repeat=4];

  // repeated bool bool_arithmetic_repeat = 113 [(dccl.field).(arithmetic).model = "bool_model",
  //                                             (dccl.field).max_repeat=4];
  

