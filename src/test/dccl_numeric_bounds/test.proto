// Copyright 2013-2022:
//   GobySoft, LLC (2013-)
//   Massachusetts Institute of Technology (2007-2014)
//   Community contributors (see AUTHORS file)
// File authors:
//   Toby Schneider <toby@gobysoft.org>
//   Chris Murphy <cmurphy@aphysci.com>
//
//
// This file is part of the Dynamic Compact Control Language Library
// ("DCCL").
//
// DCCL is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 2.1 of the License, or
// (at your option) any later version.
//
// DCCL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with DCCL.  If not, see <http://www.gnu.org/licenses/>.
@PROTOBUF_SYNTAX_VERSION@
import "dccl/option_extensions.proto";
package dccl.test;

message NumericMsg
{
  option (dccl.msg).id = 10;
  option (dccl.msg).max_bytes = 32;
  option (dccl.msg).codec_version = 4;

  optional double a = 1 [(dccl.field).max = 180,
                         (dccl.field).min = -180,
                         (dccl.field).precision = 12,
                         (dccl.field).in_head=true];

  optional double b = 2 [(dccl.field).max = 18,
                         (dccl.field).min = -18,
                         (dccl.field).precision = 4];

  // max is 2^64 rounded to 1e5
  required uint64 u1 = 3 [(dccl.field).max = 18446744073709500000,
                          (dccl.field).min = 0,
                          (dccl.field).precision = -5];

  // max is 2^64 rounded to 1e5
  required uint64 u2 = 4 [(dccl.field).max = 18446744073709500000,
                          (dccl.field).min = 0,
                          (dccl.field).precision = -5];
                        
}

message NegativePrecisionNumericMsg
{
  option (dccl.msg).id = 10;
  option (dccl.msg).max_bytes = 32;
  option (dccl.msg).codec_version = 4;

  optional double a = 1 [(dccl.field).min = -20,
                         (dccl.field).max = 20,
                         (dccl.field).precision = -1];

  optional int32 b = 2 [(dccl.field).min = -500000,
                        (dccl.field).max = 500000,
                        (dccl.field).precision = -3];
}


message TooBigNumericMsg
{
  option (dccl.msg).id = 11;
  option (dccl.msg).max_bytes = 32;
  option (dccl.msg).codec_version = 4;

  optional double a = 1 [(dccl.field).max = 180,
                         (dccl.field).min = -180,
                         (dccl.field).precision = 15];                        
}
