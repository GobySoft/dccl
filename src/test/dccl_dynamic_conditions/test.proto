syntax = "proto2";

import "dccl/option_extensions.proto";

package dccl.test;

message TestMsg
{
    option (dccl.msg) = {
        id: 2,
        max_bytes: 512,
        codec_version: 3
    };

    enum State
    {
        STATE_1 = 1;
        STATE_2 = 2;
        STATE_3 = 3;
    }

    required State state = 1;

    optional int32 a = 2 [(dccl.field) = {
        min: 0
        max: 200
        dynamic_conditions {
            // can use "return"
            required_if: "return this.state == 'STATE_1'"
            omit_if: "return this.state ~= 'STATE_1'"
        }
    }];

    optional int32 b = 3 [(dccl.field) = {
        min: 0
        max: 300
        dynamic_conditions {
            // if no return in script, assume it is implicit - DCCL will prefix
            // with "return "
            required_if: "this.state == 'STATE_2'"
            omit_if: "this.state ~= 'STATE_2'"
        }
    }];

    optional int32 c_center = 4 [
        default = 199,
        (dccl.field) = {
            min: 0
            max: 300
            dynamic_conditions {
                // same as required_if: "this.state == 'STATE_3'" and omit_if ~=
                // 'STATE_3'"
                only_if: "this.state == 'STATE_1'"
            }
        }

    ];

    optional int32 c = 6 [(dccl.field) = {
        min: 0
        max: 400
        dynamic_conditions {
            only_if: "this.state == 'STATE_1'"
            min: "this.c_center-100"
            max: "this.c_center+100"
        }
    }];

    repeated int32 d = 7 [(dccl.field) = {
        min: 0
        max: 300
        max_repeat: 6
        dynamic_conditions {
            // LUA indexes from 1
            only_if: "this_index ~= 4"
            min: "this_index*50"
            max: "this_index*50+100"
        }
    }];

    repeated Child child = 10 [(dccl.field) = { max_repeat: 10 }];
    required Child2 child2 = 11;
    optional Child3 child3 = 12;

    message Child
    {
        enum IncludeI
        {
            UNUSED = 0;
            YES = 1;
            NO = 2;
        }

        required IncludeI include_i = 1;
        optional int32 i = 2 [(dccl.field) = {
            min: 0
            max: 255
            dynamic_conditions {
                //                only_if: "s = require 'serpent';
                //                print(s.block(this)); print('child this_index:
                //                '..this_index); print('yes/no:
                //                '..this.child[this_index].include_i); return
                //                this.child[this_index].include_i == 'YES'"
                only_if: "this.child[this_index].include_i == 'YES'"
            }

        }];
    }

    message Child2
    {
        enum IncludeI
        {
            UNUSED = 0;
            YES = 1;
            NO = 2;
        }

        required IncludeI include_i = 1;
        optional int32 i = 2 [(dccl.field) = {
            min: 0
            max: 255
            dynamic_conditions { only_if: "this.child2.include_i == 'YES'" }

        }];
    }

    message Child3
    {
        enum IncludeI
        {
            UNUSED = 0;
            YES = 1;
            NO = 2;
        }

        required IncludeI include_i = 1;
        optional int32 i = 2 [(dccl.field) = {
            min: 0
            max: 255
            dynamic_conditions { only_if: "this.child3.include_i == 'YES'" }

        }];
    }
}
